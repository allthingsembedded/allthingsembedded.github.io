<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>AllThingsEmbedded</title><link>https://https://allthingsembedded.github.io/blog/</link><description>Recent content on AllThingsEmbedded</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 29 Dec 2018 17:36:13 +0000</lastBuildDate><atom:link href="https://https://allthingsembedded.github.io/blog/index.xml" rel="self" type="application/rss+xml"/><item><title>Cross-compiling for embedded devices</title><link>https://https://allthingsembedded.github.io/blog/2018/12/29/cross-compiling-for-embedded-devices/</link><pubDate>Sat, 29 Dec 2018 17:36:13 +0000</pubDate><guid>https://https://allthingsembedded.github.io/blog/2018/12/29/cross-compiling-for-embedded-devices/</guid><description>Developing code for embedded devices is somewhat different from code for mainstream computers. One of these differences is the development environment.
Most of the target microcontrollers or microprocessors won&amp;rsquo;t usually be suited for local development. Imagine trying to build your code on the target when the target is a simple 8-bit Microcontroller. First of all you would need a compiler for the target architecture on the target device and it would probably be extra slow and inconvenient.</description></item><item><title>Adding GPT support to FatFS</title><link>https://https://allthingsembedded.github.io/blog/2018/12/29/adding-gpt-support-to-fatfs/</link><pubDate>Sat, 29 Dec 2018 11:27:30 +0000</pubDate><guid>https://https://allthingsembedded.github.io/blog/2018/12/29/adding-gpt-support-to-fatfs/</guid><description>FatFs is an open source library used in many embedded devices to interface with FAT file systems in Block devices such as SD cards, flash drives, etc. It can load a FAT or ExFAT filesystem found inside a partition in an MBR partition table. However, it doesn&amp;rsquo;t provide support to find a FAT filesystem inside a GUID partition table.
This blog post will provide you with the knowledge required to load a FAT filesystem inside a GUID partition table using FatFS.</description></item><item><title>Displaying text on embedded devices</title><link>https://https://allthingsembedded.github.io/blog/2018/09/02/displaying-text-on-embedded-devices/</link><pubDate>Sun, 02 Sep 2018 04:00:37 +0000</pubDate><guid>https://https://allthingsembedded.github.io/blog/2018/09/02/displaying-text-on-embedded-devices/</guid><description>There are many ways to display text on an embedded device, but not all of them may fit your HW design. This post will expose most of your options and give you a good intuition about what you need to know in order to create great graphics software. Even if you only do hardware, this will still be of interest to you, since you will get a better understanding of what the architecture of your system needs to be to be able to display text with a certain quality.</description></item><item><title>On controlling GPIO speed</title><link>https://https://allthingsembedded.github.io/blog/2018/06/23/on-controlling-gpio-speed/</link><pubDate>Sat, 23 Jun 2018 23:07:17 +0000</pubDate><guid>https://https://allthingsembedded.github.io/blog/2018/06/23/on-controlling-gpio-speed/</guid><description>Most microcontrollers now include the options to select the GPIO speed for a certain pin inside a port. Many will announce this feature as GPIO max current control or slew-rate, but in the end they are talking about the same thing.
First of all, why would you ever need to control GPIO current? Wouldnâ€™t it be great to leave this at the maximum level at all times? Well, it is usually not that simple, and more so as integrated circuits get larger clock frequencies.</description></item></channel></rss>